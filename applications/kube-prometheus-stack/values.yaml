kube-prometheus-stack:
  prometheus:
    prometheusSpec:
      scrapeInterval: 15s

      retention: 3d

      ruleNamespaceSelector:
        matchLabels: {}
      ruleSelector:
        matchLabels: {}

      serviceMonitorNamespaceSelector:
        matchLabels: {}
      serviceMonitorSelector:
        matchLabels: {}

      podMonitorSelector:
        matchLabels: {}
      podMonitorNamespaceSelector:
        matchLabels: {}

      storageSpec:
        volumeClaimTemplate:
          spec:
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 2Gi

      thanos:
        {}

    ingress:
      enabled: true
      ingressClassName: nginx

      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
        nginx.ingress.kubernetes.io/auth-url: https://$host/oauth2/auth
        nginx.ingress.kubernetes.io/auth-signin: https://$host/oauth2/start?rd=$escaped_request_uri
      hosts:
        - prometheus.diogomota.pt
      tls:
        - secretName: prometheus-general-tls
          hosts:
            - prometheus.diogomota.pt

    thanosService:
      enabled: false

    thanosServiceMonitor:
      enabled: false

  grafana:
    defaultDashboardsTimezone: Europe/Lisbon

    deploymentStrategy:
      type: Recreate

    serviceMonitor:
      scrapeTimeout: 5s

    ingress:
      enabled: true
      ingressClassName: nginx

      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
        nginx.ingress.kubernetes.io/auth-url: https://$host/oauth2/auth
        nginx.ingress.kubernetes.io/auth-signin: https://$host/oauth2/start?rd=$escaped_request_uri
        nginx.ingress.kubernetes.io/auth-response-headers: X-Auth-Request-Email
        gethomepage.dev/enabled: "true"
        gethomepage.dev/name: "Grafana"
        gethomepage.dev/description: "The open platform for beautiful analytics and monitoring."
        gethomepage.dev/group: "Tooling"
        gethomepage.dev/icon: "grafana"
      hosts:
        - grafana.diogomota.pt
      tls:
        - secretName: grafana-general-tls
          hosts:
            - grafana.diogomota.pt




    # Organise dashboards by provider, with the provider's name as the key.
    dashboards:
      default: # The "default" provider is defined below.
        nginx-ingress-controller:
          url: https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.48.1/deploy/grafana/dashboards/nginx.json
        ingress-request-performance:
          url: https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.48.1/deploy/grafana/dashboards/request-handling-performance.json
        argocd-overview:
          gnetId: 14584
          datasource: Prometheus
        cert-manager-overview:
          gnetId: 11001
          datasource: Prometheus
      extra:
        {}

    dashboardProviders:
      dashboardproviders.yaml:
        apiVersion: 1
        providers:
          - name: default
            orgId: 1
            folder: ""
            type: file
            disableDeletion: false
            editable: true
            allowUiUpdates: true
            options:
              path: /var/lib/grafana/dashboards/default
          - name: "extra"
            orgId: 1
            folder: "Extra"
            type: file
            disableDeletion: true
            editable: true
            allowUiUpdates: true
            options:
              path: /var/lib/grafana/dashboards/extra

    persistence:
      enabled: true
      size: 5Gi
      accessModes:
        - ReadWriteOnce
      finalizers:
        - kubernetes.io/pvc-protection

    datasources:
      datasources.yaml:
        apiVersion: 1
        datasources:
          - name: Prometheus
            type: prometheus
            url: http://kube-prometheus-stack-prometheus:9090
            access: proxy

    plugins:
      - grafana-piechart-panel

  alertmanager:
    enabled: false

  kubeControllerManager:
    enabled: false

  kubeEtcd:
    enabled: false

  kubeScheduler:
    enabled: false

  kubeProxy:
    enabled: false